L'algorithme A* utilise une approche heuristique pour trouver la solution optimale en minimisant la fonction d'évaluation F(n) = g(n) + h(n), où g(n) est le coût pour atteindre le nœud actuel à partir du nœud initial et h(n) est la valeur heuristique estimée pour atteindre le nœud final à partir du nœud actuel.

Dans cet algorithme, la fonction d'évaluation F(n) est utilisée pour ordonner la file de priorité. Les nœuds ayant la valeur de F(n) la plus faible sont explorés en premier. Ainsi, la fonction d'évaluation F(n) est utilisée pour guider l'algorithme A* vers la solution optimale en explorant d'abord les nœuds les plus prometteurs.

Dans cet algorithme, la fonction heuristique h(n) est définie comme la différence absolue entre les sommes des éléments de deux ensembles. Cette heuristique est admissible car elle ne surestime jamais le coût pour atteindre le nœud final. En effet, la somme des éléments restants est une borne inférieure du coût optimal pour atteindre le nœud final, car les éléments ne peuvent jamais être enlevés d'un ensemble une fois qu'ils ont été ajoutés. Par conséquent, l'heuristique est admissible car elle fournit une estimation inférieure ou égale au coût optimal.

La PriorityQueue<State> pq est une file de priorité triée par ordre croissant de la fonction d'évaluation F(n). Elle est utilisée pour stocker les états à explorer et garantir que les états les plus prometteurs sont explorés en premier. La méthode poll() de la file de priorité renvoie et supprime l'élément ayant la plus petite valeur de F(n). La méthode add() est utilisée pour ajouter de nouveaux états à explorer.